version: '3'

services:
  caddy:
    image: sidharthbihary/micro-caddy:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config

  front-end:
    image: sidharthbihary/front-end:1.0.1 # front-end has been updated and a new version is released
    deploy:
      mode: replicated
      replicas: 1
    environment:
      BROKER_URL: "http://backend"

  broker-service:
    image: sidharthbihary/broker-service:1.0.1 # broker-service has been updated and a new version is released
    deploy:
      mode: replicated
      replicas: 1

  listener-service:
    image: sidharthbihary/listener-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  authentication-service:
    image: sidharthbihary/authentication-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "postgres://postgres:password@host.docker.internal:5435/users"
      #DSN: "host=postgres port=5435 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  logger-service:
    image: sidharthbihary/logger-service:1.0.1 # logger-service has been updated and a new version is released
    deploy:
      mode: replicated
      replicas: 1

  mailer-service:
    image: sidharthbihary/mail-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_ENCRYPTION: none
      FROM_NAME: "John Smith"
      FROM_ADDRESS: "john.smith@example.com"

  rabbitmq:
    image: 'rabbitmq:3.9-alpine'
    deploy:
      mode: global

  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "8025:8025"
    deploy:
      mode: global

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo:/data/db

  postgres:
    image: 'postgres:14.0'
    ports:
      - "5435:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

volumes:
  caddy_data:
    external: true
  caddy_config:

# docker swarm init
# docker swarm join-token worker
# docker swarm join-token manager
# docker stack deploy -c swarm.yml myapp
# docker service ls
# docker node ls
# docker stack rm myapp
# docker swarm leave --force
# docker service scale myapp_listener-service=3
# (to update a service in production: first push the tag to the docker hub and then update the swarm) docker service update --image sidharthbihary/logger-service:1.0.1 myapp_logger-service
